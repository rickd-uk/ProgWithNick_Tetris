!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/rick/Documents/DEV/CREATE/CR8_DEVS/ProgWithNick/GAMES/Tetris/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
Block	block.cpp	/^Block::Block() {$/;"	f	class:Block	signature:()
Block	block.h	/^  Block();$/;"	p	class:Block	access:public	signature:()
Block	block.h	/^class Block {$/;"	c
Block::Block	block.cpp	/^Block::Block() {$/;"	f	class:Block	signature:()
Block::Block	block.h	/^  Block();$/;"	p	class:Block	access:public	signature:()
Block::Draw	block.cpp	/^void Block::Draw() {$/;"	f	class:Block	typeref:typename:void	signature:()
Block::Draw	block.h	/^  void Draw();$/;"	p	class:Block	typeref:typename:void	access:public	signature:()
Block::cellSize	block.h	/^  int cellSize;$/;"	m	class:Block	typeref:typename:int	access:private
Block::cells	block.h	/^  std::map<int, std::vector<Position>> cells;$/;"	m	class:Block	typeref:typename:std::map<int,std::vector<Position>>	access:public
Block::colors	block.h	/^  std::vector<Color> colors;$/;"	m	class:Block	typeref:typename:std::vector<Color>	access:private
Block::id	block.h	/^  int id;$/;"	m	class:Block	typeref:typename:int	access:public
Block::rotationState	block.h	/^  int rotationState;$/;"	m	class:Block	typeref:typename:int	access:private
Draw	block.cpp	/^void Block::Draw() {$/;"	f	class:Block	typeref:typename:void	signature:()
Draw	block.h	/^  void Draw();$/;"	p	class:Block	typeref:typename:void	access:public	signature:()
Draw	grid.cpp	/^void Grid::Draw() {$/;"	f	class:Grid	typeref:typename:void	signature:()
Draw	grid.h	/^  void Draw();$/;"	p	class:Grid	typeref:typename:void	access:public	signature:()
GetCellColors	colors.cpp	/^std::vector<Color> GetCellColors() {$/;"	f	typeref:typename:std::vector<Color>	signature:()
GetCellColors	colors.h	/^std::vector<Color> GetCellColors();$/;"	p	typeref:typename:std::vector<Color>	signature:()
Grid	grid.cpp	/^Grid::Grid() {$/;"	f	class:Grid	signature:()
Grid	grid.h	/^  Grid();$/;"	p	class:Grid	access:public	signature:()
Grid	grid.h	/^class Grid {$/;"	c
Grid::Draw	grid.cpp	/^void Grid::Draw() {$/;"	f	class:Grid	typeref:typename:void	signature:()
Grid::Draw	grid.h	/^  void Draw();$/;"	p	class:Grid	typeref:typename:void	access:public	signature:()
Grid::Grid	grid.cpp	/^Grid::Grid() {$/;"	f	class:Grid	signature:()
Grid::Grid	grid.h	/^  Grid();$/;"	p	class:Grid	access:public	signature:()
Grid::Initialize	grid.cpp	/^void Grid::Initialize() {$/;"	f	class:Grid	typeref:typename:void	signature:()
Grid::Initialize	grid.h	/^  void Initialize();$/;"	p	class:Grid	typeref:typename:void	access:public	signature:()
Grid::Print	grid.cpp	/^void Grid::Print() {$/;"	f	class:Grid	typeref:typename:void	signature:()
Grid::Print	grid.h	/^  void Print();$/;"	p	class:Grid	typeref:typename:void	access:public	signature:()
Grid::cellSize	grid.h	/^  int cellSize;$/;"	m	class:Grid	typeref:typename:int	access:private
Grid::colors	grid.h	/^  std::vector<Color> colors;$/;"	m	class:Grid	typeref:typename:std::vector<Color>	access:private
Grid::grid	grid.h	/^  int grid[20][10];$/;"	m	class:Grid	typeref:typename:int[20][10]	access:public
Grid::numCols	grid.h	/^  int numCols;$/;"	m	class:Grid	typeref:typename:int	access:private
Grid::numRows	grid.h	/^  int numRows;$/;"	m	class:Grid	typeref:typename:int	access:private
IBlock	blocks.cpp	/^  IBlock() {$/;"	f	class:IBlock	file:	access:public	signature:()
IBlock	blocks.cpp	/^class IBlock : public Block {$/;"	c	file:	inherits:Block
IBlock::IBlock	blocks.cpp	/^  IBlock() {$/;"	f	class:IBlock	file:	access:public	signature:()
Initialize	grid.cpp	/^void Grid::Initialize() {$/;"	f	class:Grid	typeref:typename:void	signature:()
Initialize	grid.h	/^  void Initialize();$/;"	p	class:Grid	typeref:typename:void	access:public	signature:()
JBlock	blocks.cpp	/^  JBlock() {$/;"	f	class:JBlock	file:	access:public	signature:()
JBlock	blocks.cpp	/^class JBlock : public Block {$/;"	c	file:	inherits:Block
JBlock::JBlock	blocks.cpp	/^  JBlock() {$/;"	f	class:JBlock	file:	access:public	signature:()
LBlock	blocks.cpp	/^  LBlock() {$/;"	f	class:LBlock	file:	access:public	signature:()
LBlock	blocks.cpp	/^class LBlock : public Block {$/;"	c	file:	inherits:Block
LBlock::LBlock	blocks.cpp	/^  LBlock() {$/;"	f	class:LBlock	file:	access:public	signature:()
OBlock	blocks.cpp	/^  OBlock() {$/;"	f	class:OBlock	file:	access:public	signature:()
OBlock	blocks.cpp	/^class OBlock : public Block {$/;"	c	file:	inherits:Block
OBlock::OBlock	blocks.cpp	/^  OBlock() {$/;"	f	class:OBlock	file:	access:public	signature:()
OPAQUE	colors.cpp	/^constexpr int OPAQUE = 255;$/;"	v	typeref:typename:int
OPAQUE	grid.cpp	/^constexpr int OPAQUE = 255;$/;"	v	typeref:typename:int
POSITION_H	position.h	/^#define POSITION_H$/;"	d
Position	position.cpp	/^Position::Position(int row, int col) : row(row), col(col) {}$/;"	f	class:Position	signature:(int row,int col)
Position	position.h	/^  Position(int row, int col);$/;"	p	class:Position	access:public	signature:(int row,int col)
Position	position.h	/^class Position {$/;"	c
Position::Position	position.cpp	/^Position::Position(int row, int col) : row(row), col(col) {}$/;"	f	class:Position	signature:(int row,int col)
Position::Position	position.h	/^  Position(int row, int col);$/;"	p	class:Position	access:public	signature:(int row,int col)
Position::col	position.h	/^  int col;$/;"	m	class:Position	typeref:typename:int	access:private
Position::GetCol	position.cpp	/^int Position::GetCol() const { return col; }$/;"	f	class:Position	typeref:typename:int	signature:() const
Position::GetCol	position.h	/^  int GetCol() const;$/;"	p	class:Position	typeref:typename:int	access:public	signature:() const
Position::GetRow	position.cpp	/^int Position::GetRow() const { return row; }$/;"	f	class:Position	typeref:typename:int	signature:() const
Position::GetRow	position.h	/^  int GetRow() const;$/;"	p	class:Position	typeref:typename:int	access:public	signature:() const
Position::row	position.h	/^  int row;$/;"	m	class:Position	typeref:typename:int	access:private
Print	grid.cpp	/^void Grid::Print() {$/;"	f	class:Grid	typeref:typename:void	signature:()
Print	grid.h	/^  void Print();$/;"	p	class:Grid	typeref:typename:void	access:public	signature:()
SBlock	blocks.cpp	/^  SBlock() {$/;"	f	class:SBlock	file:	access:public	signature:()
SBlock	blocks.cpp	/^class SBlock : public Block {$/;"	c	file:	inherits:Block
SBlock::SBlock	blocks.cpp	/^  SBlock() {$/;"	f	class:SBlock	file:	access:public	signature:()
TBlock	blocks.cpp	/^  TBlock() {$/;"	f	class:TBlock	file:	access:public	signature:()
TBlock	blocks.cpp	/^class TBlock : public Block {$/;"	c	file:	inherits:Block
TBlock::TBlock	blocks.cpp	/^  TBlock() {$/;"	f	class:TBlock	file:	access:public	signature:()
ZBlock	blocks.cpp	/^  ZBlock() {$/;"	f	class:ZBlock	file:	access:public	signature:()
ZBlock	blocks.cpp	/^class ZBlock : public Block {$/;"	c	file:	inherits:Block
ZBlock::ZBlock	blocks.cpp	/^  ZBlock() {$/;"	f	class:ZBlock	file:	access:public	signature:()
blue	colors.cpp	/^const Color blue = {13, 64, 216, OPAQUE};$/;"	v	typeref:typename:const Color
cellSize	block.h	/^  int cellSize;$/;"	m	class:Block	typeref:typename:int	access:private
cellSize	grid.h	/^  int cellSize;$/;"	m	class:Grid	typeref:typename:int	access:private
cells	block.h	/^  std::map<int, std::vector<Position>> cells;$/;"	m	class:Block	typeref:typename:std::map<int,std::vector<Position>>	access:public
col	position.h	/^  int col;$/;"	m	class:Position	typeref:typename:int	access:private
colors	block.h	/^  std::vector<Color> colors;$/;"	m	class:Block	typeref:typename:std::vector<Color>	access:private
colors	grid.h	/^  std::vector<Color> colors;$/;"	m	class:Grid	typeref:typename:std::vector<Color>	access:private
cyan	colors.cpp	/^const Color cyan = {21, 204, 209, OPAQUE};$/;"	v	typeref:typename:const Color
darkGray	colors.cpp	/^const Color darkGray = {26, 31, 40, OPAQUE};$/;"	v	typeref:typename:const Color
GetCol	position.cpp	/^int Position::GetCol() const { return col; }$/;"	f	class:Position	typeref:typename:int	signature:() const
GetCol	position.h	/^  int GetCol() const;$/;"	p	class:Position	typeref:typename:int	access:public	signature:() const
GetRow	position.cpp	/^int Position::GetRow() const { return row; }$/;"	f	class:Position	typeref:typename:int	signature:() const
GetRow	position.h	/^  int GetRow() const;$/;"	p	class:Position	typeref:typename:int	access:public	signature:() const
green	colors.cpp	/^const Color green = {47, 230, 23, OPAQUE};$/;"	v	typeref:typename:const Color
grid	grid.h	/^  int grid[20][10];$/;"	m	class:Grid	typeref:typename:int[20][10]	access:public
id	block.h	/^  int id;$/;"	m	class:Block	typeref:typename:int	access:public
main	main.cpp	/^int main(void) {$/;"	f	typeref:typename:int	signature:(void)
numCols	grid.h	/^  int numCols;$/;"	m	class:Grid	typeref:typename:int	access:private
numRows	grid.h	/^  int numRows;$/;"	m	class:Grid	typeref:typename:int	access:private
orange	colors.cpp	/^const Color orange = {236, 116, 17, OPAQUE};$/;"	v	typeref:typename:const Color
purple	colors.cpp	/^const Color purple = {166, 0, 247, OPAQUE};$/;"	v	typeref:typename:const Color
red	colors.cpp	/^const Color red = {232, 18, 18, OPAQUE};$/;"	v	typeref:typename:const Color
rotationState	block.h	/^  int rotationState;$/;"	m	class:Block	typeref:typename:int	access:private
row	position.h	/^  int row;$/;"	m	class:Position	typeref:typename:int	access:private
yellow	colors.cpp	/^const Color yellow = {237, 234, 4, OPAQUE};$/;"	v	typeref:typename:const Color
