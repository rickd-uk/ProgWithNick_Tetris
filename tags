!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/rick/Documents/DEV/CREATE/CR8_DEVS/ProgWithNick/GAMES/Tetris/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
Block	block.cpp	/^Block::Block() {$/;"	f	class:Block
Block	block.h	/^class Block {$/;"	c
Center	block.h	/^  void Center(int yShift = 0, int xShift = 3) { Move(yShift, xShift); }$/;"	f	class:Block	typeref:typename:void
Draw	block.cpp	/^void Block::Draw() {$/;"	f	class:Block	typeref:typename:void
Draw	grid.cpp	/^void Grid::Draw() {$/;"	f	class:Grid	typeref:typename:void
Game	game.cpp	/^Game::Game() {$/;"	f	class:Game
Game	game.h	/^class Game {$/;"	c
GetCellColors	colors.cpp	/^std::vector<Color> GetCellColors() {$/;"	f	typeref:typename:std::vector<Color>
GetCellPositions	block.cpp	/^std::vector<Position> Block::GetCellPositions() {$/;"	f	class:Block	typeref:typename:std::vector<Position>
GetCol	position.cpp	/^int Position::GetCol() const { return col; }$/;"	f	class:Position	typeref:typename:int
GetRow	position.cpp	/^int Position::GetRow() const { return row; }$/;"	f	class:Position	typeref:typename:int
Grid	grid.cpp	/^Grid::Grid() {$/;"	f	class:Grid
Grid	grid.h	/^class Grid {$/;"	c
IBlock	blocks.cpp	/^  IBlock() {$/;"	f	class:IBlock	file:
IBlock	blocks.cpp	/^class IBlock : public Block {$/;"	c	file:
Initialize	grid.cpp	/^void Grid::Initialize() {$/;"	f	class:Grid	typeref:typename:void
JBlock	blocks.cpp	/^  JBlock() {$/;"	f	class:JBlock	file:
JBlock	blocks.cpp	/^class JBlock : public Block {$/;"	c	file:
LBlock	blocks.cpp	/^  LBlock() {$/;"	f	class:LBlock	file:
LBlock	blocks.cpp	/^class LBlock : public Block {$/;"	c	file:
Move	block.cpp	/^void Block::Move(int rows, int cols) {$/;"	f	class:Block	typeref:typename:void
OBlock	blocks.cpp	/^  OBlock() {$/;"	f	class:OBlock	file:
OBlock	blocks.cpp	/^class OBlock : public Block {$/;"	c	file:
OPAQUE	colors.cpp	/^constexpr int OPAQUE = 255;$/;"	v	typeref:typename:int
OPAQUE	grid.cpp	/^constexpr int OPAQUE = 255;$/;"	v	typeref:typename:int
POSITION_H	position.h	/^#define POSITION_H$/;"	d
Position	position.cpp	/^Position::Position(int row, int col) : row(row), col(col) {}$/;"	f	class:Position
Position	position.h	/^class Position {$/;"	c
Print	grid.cpp	/^void Grid::Print() {$/;"	f	class:Grid	typeref:typename:void
SBlock	blocks.cpp	/^  SBlock() {$/;"	f	class:SBlock	file:
SBlock	blocks.cpp	/^class SBlock : public Block {$/;"	c	file:
TBlock	blocks.cpp	/^  TBlock() {$/;"	f	class:TBlock	file:
TBlock	blocks.cpp	/^class TBlock : public Block {$/;"	c	file:
ZBlock	blocks.cpp	/^  ZBlock() {$/;"	f	class:ZBlock	file:
ZBlock	blocks.cpp	/^class ZBlock : public Block {$/;"	c	file:
blocks	game.h	/^  std::vector<Block> blocks;$/;"	m	class:Game	typeref:typename:std::vector<Block>
blue	colors.cpp	/^const Color blue = {13, 64, 216, OPAQUE};$/;"	v	typeref:typename:const Color
cellSize	block.h	/^  int cellSize;$/;"	m	class:Block	typeref:typename:int
cellSize	grid.h	/^  int cellSize;$/;"	m	class:Grid	typeref:typename:int
cells	block.h	/^  std::map<int, std::vector<Position>> cells;$/;"	m	class:Block	typeref:typename:std::map<int,std::vector<Position>>
col	position.h	/^  int col;$/;"	m	class:Position	typeref:typename:int
colOffset	block.h	/^  int colOffset;$/;"	m	class:Block	typeref:typename:int
colors	block.h	/^  std::vector<Color> colors;$/;"	m	class:Block	typeref:typename:std::vector<Color>
colors	grid.h	/^  std::vector<Color> colors;$/;"	m	class:Grid	typeref:typename:std::vector<Color>
cyan	colors.cpp	/^const Color cyan = {21, 204, 209, OPAQUE};$/;"	v	typeref:typename:const Color
darkGray	colors.cpp	/^const Color darkGray = {26, 31, 40, OPAQUE};$/;"	v	typeref:typename:const Color
green	colors.cpp	/^const Color green = {47, 230, 23, OPAQUE};$/;"	v	typeref:typename:const Color
grid	game.h	/^  Grid grid;$/;"	m	class:Game	typeref:typename:Grid
grid	grid.h	/^  int grid[20][10];$/;"	m	class:Grid	typeref:typename:int[20][10]
id	block.h	/^  int id;$/;"	m	class:Block	typeref:typename:int
main	main.cpp	/^int main(void) {$/;"	f	typeref:typename:int
numCols	grid.h	/^  int numCols;$/;"	m	class:Grid	typeref:typename:int
numRows	grid.h	/^  int numRows;$/;"	m	class:Grid	typeref:typename:int
orange	colors.cpp	/^const Color orange = {236, 116, 17, OPAQUE};$/;"	v	typeref:typename:const Color
purple	colors.cpp	/^const Color purple = {166, 0, 247, OPAQUE};$/;"	v	typeref:typename:const Color
red	colors.cpp	/^const Color red = {232, 18, 18, OPAQUE};$/;"	v	typeref:typename:const Color
rotationState	block.h	/^  int rotationState;$/;"	m	class:Block	typeref:typename:int
row	position.h	/^  int row;$/;"	m	class:Position	typeref:typename:int
rowOffset	block.h	/^  int rowOffset;$/;"	m	class:Block	typeref:typename:int
yellow	colors.cpp	/^const Color yellow = {237, 234, 4, OPAQUE};$/;"	v	typeref:typename:const Color
